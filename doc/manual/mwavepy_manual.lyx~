#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrbook
\begin_preamble
\usepackage{amssymb,amsmath}
\widowpenalty=10000 
\clubpenalty=10000 


\usepackage{listings}
\usepackage{color}
\usepackage{textcomp}
\definecolor{listinggray}{gray}{0.9}
\definecolor{lbcolor}{rgb}{0.9,0.9,0.9}
\lstset{
backgroundcolor=\color{lbcolor},
tabsize=4,
rulecolor=,
language=Python,
        basicstyle=\scriptsize,
        upquote=true,
        aboveskip={1.5\baselineskip},
        columns=fixed,
        showstringspaces=false,
        extendedchars=true,
        breaklines=true,
        prebreak = \raisebox{0ex}[0ex][0ex]{\ensuremath{\hookleftarrow}},
        frame=single,
        showtabs=false,
        showspaces=false,
        showstringspaces=false,
        identifierstyle=\ttfamily,
        keywordstyle=\color[rgb]{0,0,1},
        commentstyle=\color[rgb]{0.133,0.545,0.133},
        stringstyle=\color[rgb]{0.627,0.126,0.941},
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 1in
\rightmargin 1.25in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
mwavepy Manual
\end_layout

\begin_layout Author
Alex Arsenovic
\end_layout

\begin_layout Date
10/03/2010
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
About
\end_layout

\begin_layout Standard

\series bold
mwavepy
\series default
 is a compilation of functions and class's for microwave/RF engineering
 written in python.
 It is useful for things such as touchstone file manipulation, calibration,
 data analysis, data acquisition, and plotting.
 
\series bold
mwavepy 
\series default
can be used interactively through the python interpreter, or in scripts.
 
\end_layout

\begin_layout Standard

\series bold
mwavepy
\series default
 started when I began to compile all of my personal functions into a single
 program.
 I then realized that creating some abstract entities such as a n-port network,
 calibration instance, and virtual instruments, would make a lot of aspects
 of data analysis faster.
 It did.
\end_layout

\begin_layout Standard
Because I am not a professional developer, I can only implement what is
 feasible time-wise, which translates into 'things I need immediatly'.
 But, I have tried to structure everything with scalability in mind, so
 others can add onto 
\series bold
mwavepy.
\end_layout

\begin_layout Chapter
Installation
\end_layout

\begin_layout Section
Dependencies
\end_layout

\begin_layout Standard
The requirements are basically a python environment setup to do numerical/scient
ific computing.
 If you are new to python, you should consider using
\begin_inset CommandInset href
LatexCommand href
name "pythonxy"
target "http://www.pythonxy.com/ "

\end_inset

, which provides everything you need to get started.
\end_layout

\begin_layout Standard
Here is a list of the requirements, 
\end_layout

\begin_layout Paragraph

\series bold
Necessary
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Python >= 2.6"
target "http://www.python.org/ "

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "matplotlib"
target "http://matplotlib.sourceforge.net/ "

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "numpy"
target "http://numpy.scipy.org/ "

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "scipy"
target "http://www.scipy.org/ "

\end_inset


\end_layout

\begin_layout Paragraph*
Recomended
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ipython"
target "http://ipython.scipy.org/moin/"

\end_inset

 (for interactive shell) 
\end_layout

\begin_layout Paragraph
Optional
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "pyvisa"
target "http://pyvisa.sourceforge.net/pyvisa/"

\end_inset

 - for instrument control 
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "pythics"
target "http://code.google.com/p/pythics"

\end_inset

- for VI gui interface design
\end_layout

\begin_layout Section
Platform independent
\end_layout

\begin_layout Standard
Python has many choices for module installation, listed here are installation
 instructions using setuptools, distutils.
 All of these assume you have installed the required dependencies.
\end_layout

\begin_layout Subsection
current version, using svn
\end_layout

\begin_layout Standard
svn will get you the most up-to-date version of the mwavepy, docs, and examples,
 but may have bugs.
 Check-out using, 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

svn checkout http://mwavepy.googlecode.com/svn/trunk/ mwavepy-read-only 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Install mwavepy by cd'ing into the mwavepy directory, and running
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

python setup.py install 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Source Package
\end_layout

\begin_layout Standard
There are also pre-made releases available.
 These can be installed by using setuptools
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://pypi.python.org/pypi/setuptools"

\end_inset

 
\end_layout

\end_inset

 or distutils.
 
\end_layout

\begin_layout Paragraph
setuptools
\end_layout

\begin_layout Standard
Open a terminal and type:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

easy_install mwavepy
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This should download and install mwavepy.
 
\end_layout

\begin_layout Paragraph
distutils
\end_layout

\begin_layout Standard
Download and extract a source package from the mwavepy website.
 Open up terminal, cd in mwavepy's directory, and type,
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

python setup.py install 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Windows executable
\end_layout

\begin_layout Standard
Although this may be easier than instaling from svn or a source package,
 the windows executable will not provide the documentation or examples.
 Either, way Install all python modules listed under Requirements, or install
 pythonxy.
 Then you can download and run the windows installer from the mwavepy website
 
\end_layout

\begin_layout Section
Linux
\end_layout

\begin_layout Standard
I have yet to make a package for any specific distribution, so linux users
 will have to follow the platform independent directions.
 However, installing the requirements in a debian-based linux system is
 much easier than with windows, 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

sudo apt-get install python-numpy python-scipy python-matplotlib ipython
 python
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You will probably have to go fetch pyvisa yourself, or use easy_install.
\end_layout

\begin_layout Chapter
Quick Intro
\end_layout

\begin_layout Standard
This is a quick intro to get the reader comfortable working with 
\series bold
mwavepy
\series default
.
 
\series bold
mwavepy
\series default
, like all of python, can be used in scripts or through the python interpreter.
 Fire up a python terminal (or IPython), and import the mwavepy module 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

import mwavepy as mv
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
From here all mwavepy's functions can be accessed through the variable 'mv'.
 In IPython you can use the autocomplete feature to inspect a module by
 typing mv.[hit tab], and all the classes and functions will be listed.
 Help for any of the functions can be accessed by typing, 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

help mv.function
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For our first example, lets load up the data from a touchstone file (default
 format for VNA's, ie .s2p).
 Distributed with mwavepy should be a folder called examples.
 cd into this folder, where you will find an example touchstone file containig
 data for a calibrated horn antenna.
 
\series bold
mwavepy
\series default
 has a class which represents a n-port network, called Network.
 It can be initialized from the contents of a touchstone file like so, 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

horn = mv.Network('horn.s1p')
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
From here you can tab out the contents of the newly created Network by typing
 horn.[hit tab].
 You can get help on the various functions as described above.
 Some of the plotting functions can are illustrated in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Basic-Usage"

\end_inset

.
 The base storage format for a Network's data is in scattering parameters,
 these can be accessed by the property, 's'.
 Basic element-wise arithmetic can also be done on the scattering parameters,
 through operations on the Networks themselves.
 For instance if you want to form the complex division of two Networks scatering
 matrices, 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

horn2 =  mv.Network('horn.s1p')
\end_layout

\begin_layout Plain Layout

horn_diff = horn/horn2
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This can also be used to implement averaging
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

horn_average = (horn+horn2)/2
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Other non-elementwise operations are also available, such as cascading and
 de-embeding two-port networks.
 For instance the composit network of two, two-port networks is formed using
 the power operator (**), 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

composit_ntwk = horn ** horn2 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
De-embeding can be accomplished by using the floor division (//) operator
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

horn2 = composit_nwtk //horn 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you are done with a network you can save it back to a touchstone, 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

horn2.write_to_touchstone('horn2')
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Basic Usage
\begin_inset CommandInset label
LatexCommand label
name "cha:Basic-Usage"

\end_inset


\end_layout

\begin_layout Section
Basic Plotting
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

import mwavepy as mv
\end_layout

\begin_layout Plain Layout

import pylab
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# create a Network type from a touchstone file of a horn antenna
\end_layout

\begin_layout Plain Layout

horn = mv.Network('horn.s2p')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# plot magnitude of S11
\end_layout

\begin_layout Plain Layout

pylab.figure(1)
\end_layout

\begin_layout Plain Layout

pylab.title('Return Loss (Mag)')	
\end_layout

\begin_layout Plain Layout

horn.plot_s_db(m=0,n=0)	# m,n are S-Matrix indecies
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../examples/basicTouchstonePlotting/Return Loss (Mag).eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# plot phase of S11
\end_layout

\begin_layout Plain Layout

pylab.figure(2)
\end_layout

\begin_layout Plain Layout

pylab.title('Return Loss (Phase)')
\end_layout

\begin_layout Plain Layout

# all keyword arguments are passed to matplotlib.plot command
\end_layout

\begin_layout Plain Layout

horn.plot_s_deg(0,0, label='Broadband Horn Antenna', color='r', linewidth=2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../examples/basicTouchstonePlotting/Return Loss (Phase).eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

# plot unwrapped phase of S11
\end_layout

\begin_layout Plain Layout

pylab.figure(3)
\end_layout

\begin_layout Plain Layout

pylab.title('Return Loss (Unwrapped Phase)')
\end_layout

\begin_layout Plain Layout

horn.plot_s_deg_unwrapped(0,0)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../examples/basicTouchstonePlotting/Return Loss (Unwrapped Phase).eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

# plot complex S11 on smith chart
\end_layout

\begin_layout Plain Layout

pylab.figure(5)
\end_layout

\begin_layout Plain Layout

horn.plot_s_smith(0,0, show_legend=False)
\end_layout

\begin_layout Plain Layout

pylab.title('Return Loss, Smith')
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../examples/basicTouchstonePlotting/Return Loss, Polar.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

# plot complex S11 on smith chart
\end_layout

\begin_layout Plain Layout

pylab.figure(5)
\end_layout

\begin_layout Plain Layout

horn.plot_s_smith(0,0, show_legend=False)
\end_layout

\begin_layout Plain Layout

pylab.title('Return Loss, Smith')
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../examples/basicTouchstonePlotting/Return Loss, Smith.eps

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

# uncomment to save all figures, 
\end_layout

\begin_layout Plain Layout

#mvy.save_all_figs('.', format = ['png','eps'])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# show the plots 
\end_layout

\begin_layout Plain Layout

pylab.show()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Calibration
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This section describes how to use mwavepy to calibrate data taken from a
 VNA.
 The explanation of calibration theory and calibration kit design is beyond
 the scope of this document.
 This page describes how to calibrate a device under test (DUT), assuming
 you have measured an acceptable set of standards.
\end_layout

\begin_layout Standard
*mwavepy*'s calibration algorithm is generic, in that it will work with
 any set of standards.
 If you supply more calibration standards than is needed, *mwavepy* will
 implement a simple least-squares solution.
 
\end_layout

\begin_layout Standard
Calibrations are performed through a Calibration class, which makes creating
 and working with calibrations easy.
 Since *mwavepy-1.2* the Calibration class only requires two pieces of informatio
n: 
\end_layout

\begin_layout Itemize
a list of measured Networks 
\end_layout

\begin_layout Itemize
a list of ideal Networks
\end_layout

\begin_layout Standard
The Network elements in each list must all be similar, (same #ports, same
 frequency info, etc) and must be aligned to each other, meaning the first
 element of ideals list must correspond to the first element of measured
 list.
 
\end_layout

\begin_layout Standard
Optionally, other information can be provided for explicitness, such as,
 
\end_layout

\begin_layout Itemize
calibration type 
\end_layout

\begin_layout Itemize
frequency information
\end_layout

\begin_layout Itemize
reciprocity of embedding networks 
\end_layout

\begin_layout Itemize
etc
\end_layout

\begin_layout Standard
When this information is not provided *mwavepy* will determine it through
 inspection.
 
\end_layout

\begin_layout Section
One-Port
\end_layout

\begin_layout Standard
Below are (hopefully) self-explanatory examples of increasing complexity,
 which should illustrate, by example, how to make a calibration.
\end_layout

\begin_layout Subsection
Simple One-port 
\end_layout

\begin_layout Standard
This example is written to be instructive, not concise.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

import mwavepy as mv
\end_layout

\begin_layout Plain Layout

## created necessary data for Calibration class
\end_layout

\begin_layout Plain Layout

# a list of Network types, holding 'ideal' responses 
\end_layout

\begin_layout Plain Layout

my_ideals = [
\backslash
 
\end_layout

\begin_layout Plain Layout

	mv.Network('ideal/short.s1p'), 
\end_layout

\begin_layout Plain Layout

	mv.Network('ideal/open.s1p'), 
\end_layout

\begin_layout Plain Layout

	mv.Network('ideal/load.s1p'), ]
\end_layout

\begin_layout Plain Layout

# a list of Network types, holding 'measured' responses 
\end_layout

\begin_layout Plain Layout

my_measured = [
\backslash
 
\end_layout

\begin_layout Plain Layout

mv.Network('measured/short.s1p'), mv.Network('measured/open.s1p'), mv.Network('measur
ed/load.s1p'), ]
\end_layout

\begin_layout Plain Layout

## create a Calibration instance cal = mv.Calibration(
\backslash
 ideals = my_ideals, measured = my_measured, )
\end_layout

\begin_layout Plain Layout

## run, and apply calibration to a DUT
\end_layout

\begin_layout Plain Layout

# run calibration algorithm cal.run() 
\end_layout

\begin_layout Plain Layout

# apply it to a dut dut = mv.Network('my_dut.s1p') dut_caled = cal.apply_cal(dut)
\end_layout

\begin_layout Plain Layout

# plot results dut_caled.plot_s_db() # save results dut_caled.write_touchstone()
 }}}
\end_layout

\begin_layout Plain Layout

== Concise One-port == This example is meant to be the same as the first
 except more concise.
 {{{ import mwavepy as mv
\end_layout

\begin_layout Plain Layout

my_ideals = mv.load_all_touchstones_in_dir('ideals/') my_measured = mv.load_all_to
uchstones_in_dir('measured/')
\end_layout

\begin_layout Plain Layout

## create a Calibration instance cal = mv.Calibration(
\backslash
 ideals = [my_ideals[k] for k in ['short','open','load']], measured = [my_measur
ed[k] for k in ['short','open','load']], )
\end_layout

\begin_layout Plain Layout

## what you do with 'cal' may may be similar to above example }}}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset

{{{
\end_layout

\begin_layout Standard
= Two-port = Two-port calibration is more involved than one-port.
 *mwavepy* supports two-port calibration using a 8-term error model based
 on the algorithm described in "A Generalization of the TSD Network-Analyzer
 Calibration Procedure, Covering n-Port Scattering-Parameter Measurements,
 Affected by Leakage Errors" by R.A.
 Speciale [http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1129282
 here].
 
\end_layout

\begin_layout Standard
Like the one-port algorithm, the two-port calibration can handle any number
 of standards, providing that some fundamental constraints are met.
 In short, you need three two-port standards; one must be transmissive,
 and one must provide a known impedance and be reflective.
 
\end_layout

\begin_layout Standard
One draw-back of using the 8-term error model formulation (which is the
 same formulation used in TRL) is that switch-terms may need to be measured
 in order to achieve a high quality calibration (this was pointed out to
 me by Dylan Williams).
 
\end_layout

\begin_layout Standard
== A note on switch-terms == Switch-terms are explained in Roger Marks's
 paper titled 'Formulations of the Basic Vector Network Analyzer Error Model
 including Switch-Terms' [http://www.google.com/url?sa=t&source=web&cd=1&ved=0CBYQ
FjAA&url=http%3A%2F%2Fieeexplore.ieee.org%2Fiel5%2F4119930%2F4119931%2F04119948.pdf
%3F...&rct=j&q=marks%20switch%20terms&ei=Yj_JTaK-EsHIgQeLxsyOBg&usg=AFQjCNHvady0wYH
dJjRmNns33nUPC2b1LA&cad=rja here].
 Basically, switch-terms account for the fact that the error networks change
 slightly depending on which port is being excited.
 This is due to the hardware of the VNA.
 
\end_layout

\begin_layout Standard
So how do you measure switch terms? With a custom measurement configuration
 on the VNA itself.
 I have support for switch terms in my HP8510C class [http://code.google.com/p/mwa
vepy/source/browse/trunk/mwavepy/virtualInstruments/vna.py#532 here], which
 you can use or extend to different VNA.
 Without switch-term measurements, your calibration quality will vary depending
 on properties of you VNA.
 
\end_layout

\begin_layout Standard
== Simple Two Port == 
\end_layout

\begin_layout Standard
Two-port calibration is accomplished in an identical way to one-port, except
 all the standards are two-port networks.
 This is even true of reflective standards (S21=S12=0).
 So if you measure reflective standards you must measure two of them simultaneou
sly, and store information in a two-port.
 For example, connect a short to port-1 and a load to port-2, and save a
 two-port measurement as 'short,load.s2p' or similar.
 
\end_layout

\begin_layout Standard
{{{
\end_layout

\begin_layout Standard
import mwavepy as mv
\end_layout

\begin_layout Standard
## created necessary data for Calibration class
\end_layout

\begin_layout Standard
# a list of Network types, holding 'ideal' responses my_ideals = [
\backslash
 mv.Network('ideal/thru.s2p'), mv.Network('ideal/line.s2p'), mv.Network('ideal/short,
 short.s2p'), ]
\end_layout

\begin_layout Standard
# a list of Network types, holding 'measured' responses my_measured = [
\backslash
 mv.Network('measured/thru.s2p'), mv.Network('measured/line.s2p'), mv.Network('measur
ed/short, short.s2p'), ]
\end_layout

\begin_layout Standard
## create a Calibration instance cal = mv.Calibration(
\backslash
 ideals = my_ideals, measured = my_measured, )
\end_layout

\begin_layout Standard
## run, and apply calibration to a DUT
\end_layout

\begin_layout Standard
# run calibration algorithm cal.run() 
\end_layout

\begin_layout Standard
# apply it to a dut dut = mv.Network('my_dut.s2p') dut_caled = cal.apply_cal(dut)
\end_layout

\begin_layout Standard
# plot results dut_caled.plot_s_db() # save results dut_caled.write_touchstone()
 }}}
\end_layout

\begin_layout Standard
== Using s1p ideals in two-port calibration == Commonly, you have data for
 ideal data for reflective standards in the form of one-port touchstone
 files (ie s1p).
 To use this with mwavepy's two-port calibration method you need to create
 a two-port network that is a composite of the two networks.
 There is a function in the WorkingBand Class which will do this for you,
 called two_port_reflect.
 {{{ short = mv.Network('ideals/short.s1p') load = mv.Network('ideals/load.s1p')
 short_load = wb.two_port_reflect(short, load)
\end_layout

\begin_layout Standard
}}}
\end_layout

\begin_layout Standard
= Using mwavepy to create ideal responses=
\end_layout

\begin_layout Standard
*mavepy* also has basic support for creation of simple standards.
 This is accomplished through the sub-module transmissionLine.
 
\end_layout

\begin_layout Standard
= Parameterized Self-calibration = == One-Port == == Two-Port ==
\end_layout

\begin_layout Chapter
Advanced Usage
\end_layout

\begin_layout Chapter
Architecture
\end_layout

\begin_layout Section
Module Layout and Inheritance
\end_layout

\begin_layout Standard
\align left
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pics/classInheretanceOutline.pdf
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Module Layout and inheritance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Individual Class Architectures
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

import mwavepy as mv
\end_layout

\begin_layout Plain Layout

mv.Network('Interface 1/caled/short.s1p').plot_s_deg
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Frequency
\end_layout

\begin_layout Standard
The frequency object was created to make storing and manipulating frequency
 information easier and more rigid.
 A major convenience this class provides is the acounting of the frequency
 vector's unit.
 Other objects, such as Network, and Calibration require a frequency vector
 to be meaningful.
 This vector is commonly referenced when a plot is generated, which one
 generally doesnt was in units of Hz.
 If the Frequency object did not exist other objects which require frequency
 information would have to implement the unit and multiplier bagage.
 
\end_layout

\begin_layout Standard
\align left
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pics/frequency.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Frequency class architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Example:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python] 
\end_layout

\begin_layout Plain Layout

freq = mv.Frequency(start = 80,stop=120, npoints = 201, unit='ghz') 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting} 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Network
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pics/network.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Network class architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
touchstone
\end_layout

\begin_layout Standard
The standard file format used to store data retrieved from Vector Network
 Analyzers (VNAs) is the touchstone file format.
 This file contains all relevent data of a measured network such as frequency
 info, network parameters (s, y,z, etc), and port impedance.
\end_layout

\begin_layout Subsection
WorkingBand
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pics/workingBand.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
WorkingBand class architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Calibration
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pics/calibration.pdf

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Calibration class architecture
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Future Work
\end_layout

\end_body
\end_document
